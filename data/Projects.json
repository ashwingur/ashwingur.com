[
  {
    "title": "api.ashwingur",
    "image": "/assets/projects/api.ashwingur.png",
    "description": "I have developed a new backend for my website. Initially, I used the backend provided with Next.js, but I wanted to expand my backend capabilities and host my owndatabase. I have set up an Ubuntu server on DigitalOcean. The application runs in a Docker container for easy configuration when working between my local and remote environments. A Flask server has been set up, using Gunicorn for the WSGI (Web Server Gateway Interface), and a Caddy web server for HTTPS. The database is PostgreSQL with the TimescaleDB extension for optimal querying of time-series data. The server also features custom rate limiting on each endpoint with a Redis database, and authentication capabilities for accessing protected routes. Additionally, there are apps that allow for websocket connections to enable fast communication.",
    "stack": [
      "Ubuntu",
      "Docker",
      "Python",
      "Flask",
      "PostgreSQL",
      "Redis",
      "Gunicorn",
      "Caddy"
    ],
    "links": [
      {
        "display": "Page",
        "url": "https://api.ashwingur.com/"
      },
      {
        "display": "GitHub",
        "url": "https://github.com/ashwingur/api.ashwingur"
      }
    ]
  },
  {
    "title": "Ashwin's Weather Hub",
    "image": "/assets/projects/weather.png",
    "description": "The weather station, set up in my backyard, is a Raspberry Pi Zero 2W attached to atmospheric, ambient light, and air quality sensors. It runs 24/7 and samples the sensor data every 5 minutes, which is posted to my PostgreSQL database. The sensor data is stored in a TimescaleDB hypertable, allowing for very efficient queries, even with millions of rows in the table. The longer the timescale, the larger the time bucket for averaging. This allows for long-term trends to be observed easily and efficiently. The timeseries data is displayed on the frontend using the Recharts library, which allows for full customisation of axes styles and display.",
    "stack": [
      "Raspberry Pi",
      "I2C Sensors",
      "Python",
      "TimescaleDB",
      "PostgreSQL",
      "Cron",
      "React",
      "Recharts",
      "Tailwind CSS"
    ],
    "links": [
      {
        "display": "Page",
        "url": "/Weather"
      },
      {
        "display": "GitHub and Setup",
        "url": "https://github.com/ashwingur/pi-weather-station"
      }
    ]
  },
  {
    "title": "Media Reviews",
    "image": "/assets/projects/media_reviews.png",
    "description": "Previously, this site used static generation with a single JSON file to store all the review data. However, I wanted to enhance its functionality by enabling dynamic addition and editing of reviews from the frontend. To achieve this, I created a custom form that allows submissions and updates on the backend. There is a one-to-many relationship between reviews and sub-reviews (e.g., one book series can have many books). Genres have a many-to-many relationship with reviews. By utilizing a database, I can efficiently serve reviews using paginated queries and perform complex filter operations server-side. This project also marked my first time integrating proper schema validation on both the frontend and backend. Additionally, I provided a statistics page to track rating distributions, media types, and other interesting data.",
    "stack": [
      "Python",
      "TimescaleDB",
      "PostgreSQL",
      "React",
      "Recharts",
      "Tailwind CSS"
    ],
    "links": [
      {
        "display": "Page",
        "url": "/MediaReviews"
      },
      {
        "display": "Client Code",
        "url": "https://github.com/ashwingur/ashwingur.com/blob/main/pages/MediaReviews.tsx"
      },
      {
        "display": "DB Model",
        "url": "https://github.com/ashwingur/api.ashwingur/blob/main/app/models/media_reviews.py"
      },
      {
        "display": "API",
        "url": "https://github.com/ashwingur/api.ashwingur/blob/main/app/mediareviews/routes.py"
      }
    ]
  },
  {
    "title": "Tron Arcade",
    "image": "/assets/projects/tron.png",
    "description": "I was inspired to make a multiplayer game once I had my own Flask server set up. I decided to go with the 2D Tron game because I played it in school and it is simple but fun. I am using Socket.IO to communicate between the client and server. It provides utility functions for creating rooms, which is useful in the context of a multiplayer game, where you only want to broadcast messages to players who have joined the room. All game state validation occurs on the server, which prevents cheating from the client side. When a game starts, the client can only send their direction input, which is validated on the server for legality. The game runs at 30 ticks per second and sends every player's location on each tick to the client. The client stores a local game grid, which allows for lightweight communication as only the latest positions are updated. The game is rendered using the p5.js React wrapper library.",
    "stack": ["Socket.IO", "Flask-SocketIO", "p5.js", "React", "Tailwind CSS"],
    "links": [
      {
        "display": "Game Page",
        "url": "/Tron"
      },
      {
        "display": "Client Code",
        "url": "https://github.com/ashwingur/ashwingur.com/blob/main/pages/Tron.tsx"
      },
      {
        "display": "Server Code",
        "url": "https://github.com/ashwingur/api.ashwingur/blob/main/app/tron/routes.py"
      }
    ]
  },
  {
    "title": "Clash of Clans Tracker",
    "image": "/assets/projects/clashofclans.png",
    "description": "Uses the Clash of Clans developer API to provide player, clan, war and league information. The style is very similar to the game style and provides the information in a familiar format. There is also a progress tracker for all players in my clan which is scraped daily using a cron. Data is efficiently saved to a PostgreSQL table for efficient querying. The backend also integrates with my discord bot.",
    "stack": [
      "Next.js",
      "Tailwind CSS",
      "TypeScript",
      "PostgreSQL",
      "Recharts"
    ],
    "links": [
      {
        "display": "Page",
        "url": "/ClashOfClans"
      },
      {
        "display": "GitHub",
        "url": "https://github.com/ashwingur/ashwingur-portfolio-website/blob/main/pages/ClashOfClans.tsx"
      }
    ]
  },
  {
    "title": "Cube Timer",
    "image": "/assets/projects/cube_timer.png",
    "description": "3x3 Rubiks Cube timer that provides randomly generated scrambles with a preview. The timer mimics the offical stackmat timer design where the timer must be held down for a moment before it can start.",
    "stack": ["Next.js", "Tailwind CSS", "TypeScript", "React"],
    "links": [
      {
        "display": "Page",
        "url": "/CubeTimer"
      },
      {
        "display": "GitHub",
        "url": "https://github.com/ashwingur/ashwingur-portfolio-website/blob/main/pages/CubeTimer.tsx"
      }
    ]
  },
  {
    "title": "Diskord",
    "image": "/assets/projects/diskord.png",
    "description": "Public chatroom that anyone can join with a username. Uses Pusher websocket connections to relay messages between the clients.",
    "stack": ["Next.js", "Tailwind CSS", "TypeScript", "React", "Pusher"],
    "links": [
      {
        "display": "Page",
        "url": "/Diskord"
      },
      {
        "display": "GitHub",
        "url": "https://github.com/ashwingur/ashwingur-portfolio-website/blob/main/pages/Diskord.tsx"
      }
    ]
  },
  {
    "title": "Tic Tac Toe",
    "image": "/assets/projects/tictactoe.png",
    "description": "Online multiplayer Tic Tac Toe game. Users are able to host a game with any chosen room name and can get someone to join that room with the room name. Responsive design for mobile and dark mode support.",
    "stack": ["Next.js", "Tailwind CSS", "TypeScript", "React", "Pusher"],
    "links": [
      {
        "display": "Page",
        "url": "/TicTacToe"
      },
      {
        "display": "GitHub",
        "url": "https://github.com/ashwingur/ashwingur-portfolio-website/blob/main/pages/TicTacToe.tsx"
      }
    ]
  },
  {
    "title": "Turret-Spinner",
    "image": "/assets/projects/turret_spinner.png",
    "description": "2D Endless Survival Game created in Unity. The pixel art assets were created in GIMP.",
    "stack": ["Unity", "C#", "GIMP"],
    "links": [
      {
        "display": "GitHub",
        "url": "https://github.com/ashwingur/Turret-Spinner"
      },
      {
        "display": "Gameplay Video",
        "url": "https://www.youtube.com/watch?v=9UvweIp-2q4&ab_channel=AshwinGur"
      }
    ]
  },
  {
    "title": "Snake",
    "image": "https://raw.githubusercontent.com/ashwingur/Snake-Game/master/snake_example.gif",
    "description": "Snake Game created in Rust using sdl2.",
    "stack": ["Rust"],
    "links": [
      {
        "display": "GitHub",
        "url": "https://github.com/ashwingur/Snake-Game"
      }
    ]
  },
  {
    "title": "Countries of the World Quizzer",
    "image": "/assets/projects/countries_of_the_world.png",
    "description": "A website that helps you learn the countries of the world, capital cities and flags with many different quiz options. The UI colour scheme and layout is pretty ugly, but in my defence it was my first real react project.",
    "stack": ["React", "CSS"],
    "links": [
      {
        "display": "Website",
        "url": "https://countries-website.pages.dev/all_countries"
      },
      {
        "display": "GitHub",
        "url": "https://github.com/ashwingur/countries-website"
      }
    ]
  },
  {
    "title": "Chip-8 Emulator",
    "image": "https://raw.githubusercontent.com/ashwingur/chip8_emulator/master/CONNECT4_gameplay.gif",
    "description": "Chip-8 Emulator in written Rust which uses the sdl2 library to render the screen. Follows the specifications outlined in the Chip-8 Technical Reference. It contains many roms that can be played",
    "stack": ["Rust"],
    "links": [
      {
        "display": "GitHub",
        "url": "https://github.com/ashwingur/chip8_emulator"
      }
    ]
  }
]
