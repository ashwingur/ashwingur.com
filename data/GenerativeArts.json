[
  {
    "name": "Particle Life",
    "url": "/GenerativeArt/ParticleLife",
    "image": "/assets/generativeart/particle_life.gif",
    "description": [
      "This was heavily inspired by a youtube video I saw that is also called Particle Life. This is definitely my favourite creation so far because you can get a unique behaviour every time, and you will likely never see that exact behaviour again. ",
      "A simulation that demonstrates emergence through simple rules. A particle is associated to a species according to its colour. Each colour has a random attracive or repulsive force to itself and every other particle. There is also a universal repulsion force between every particle regardless of colour, which prevents attracted particles from collapsing to a singularity. The physics also wrap around the edges of the canvas, you can think of it as a torus structure.",
      "There are many customisable parameters to mess around with to change the particle behaviours or appearance. A cool fluid like effect is so set the trails to maximum and then set a blur value."
    ]
  },
  {
    "name": "The Downpour",
    "url": "/GenerativeArt/TheDownpour",
    "image": "/assets/generativeart/downpour.gif",
    "description": [
      "Cool rain simulation with collision physics against buildings. There is also a layered effect that gives a sense of depth. This one is better experience on PC because of the larger canvas size capability."
    ]
  },
  {
    "name": "Dune",
    "url": "/GenerativeArt/Dune",
    "image": "/assets/generativeart/dune.gif",
    "description": [
      "The first generative art project I made. It is a falling sand simulator where can hold and drag within the canvas to create sand in that area and watch it fall. It was a bit challenging to get gravity implemented and there are some quirks with the behaviour. The sand will aim to disperse into a triangular shape. If there is an empty spot to the bottom left or bottom right pixel, then the sand particle will move there."
    ]
  },
  {
    "name": "Cellular Automata",
    "url": "/GenerativeArt/CellularAutomata",
    "image": "/assets/generativeart/cellular_automata.gif",
    "description": [
      "2D cellular automata implementation. This is the 256 cellular automata generated by the corresponding Wolfram code. Each row starting from the top represents a generation. Each pixel in a generation looks at the immediate top-left, top and top-right pixel of the previous generation. These 3 cells form a 3 bit number based on their activation. This 3 bit number determines the next state by mapping to the 8 bit number defined by the chosen rule.",
      "There are some notable rules that give interesting behaviour. Rule 30 displays a chaotic behaviour that also appears on a Conus textile shell. Rule 26 generates the Sierpinski triangle fractal. "
    ]
  },
  {
    "name": "Neon Beehive",
    "url": "/GenerativeArt/NeonBeehive",
    "image": "/assets/generativeart/neon_beehive.gif",
    "description": [
      "Neon style particles that travel in a hexagonal pattern. Many parameters can be changed for some unique effects."
    ]
  },
  {
    "name": "Spark Puddle",
    "url": "/GenerativeArt/SparkPuddle",
    "image": "/assets/generativeart/spark_puddle.gif",
    "description": [
      "A particle system similar to sparklers. Also includes a cool reflection effect when the particles bounce off the ground."
    ]
  },
  {
    "name": "Game of Life",
    "url": "/GenerativeArt/GameOfLife",
    "image": "/assets/generativeart/game_of_life.gif",
    "description": [
      "Game of life implementation using shaders. Each pixel is a cell and the previous state is passed in as a 2D texture which allows us to sample the neighbouring values. The shader allows us to run at a much higher resolution."
    ]
  },
  {
    "name": "Mandelbrot",
    "url": "/GenerativeArt/Mandelbrot",
    "image": "/assets/generativeart/mandelbrot.gif",
    "description": [
      "Mandelbrot implementation provided by p5js. I wanted to learn about shaders so I attempted to get this integrated with nextjs and the p5 wrapper."
    ]
  },
  {
    "name": "Disco Donut",
    "url": "/GenerativeArt/DiscoDonut",
    "image": "/assets/generativeart/disco_donut.gif",
    "description": [
      "My very first original shader where I didn't copy any existing code. Messed around with some sinuisoidal patterns to get this cool lens effect."
    ]
  },
  {
    "name": "Rainbow Smoke",
    "url": "/GenerativeArt/RainbowSmoke",
    "image": "/assets/generativeart/rainbow_smoke.gif",
    "description": [
      "2D pixel art using every RGB value in the colour space at most once. It starts off at a random pixel location on the canvas and traverses the entire grid using a combination of BFS and DFS. Note this program is not optimised well optimised, larger canvas or RGB resolution sizes will take time to generate."
    ]
  },
  {
    "name": "Bouncing Particles",
    "url": "/GenerativeArt/BouncingParticles",
    "image": "/assets/generativeart/bouncing_particles.avif",
    "description": [
      "Simulating a simple gas particle with inelastic collisions against the walls. Particle size, count and speed can be adjusted."
    ]
  },
  {
    "name": "Bubbles",
    "url": "/GenerativeArt/Bubbles",
    "image": "/assets/generativeart/bubbles.gif",
    "description": [
      "Really simple animation that involves a bunch of circle particles that travel in a random radius. Bubbles expand in size the closer they are to the mouse."
    ]
  }
]
